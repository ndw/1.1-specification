<specification xmlns="http://docbook.org/ns/docbook" xmlns:cs="http://www.w3.org/XML/XProc/2006/04/components#" xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xmlns:p="http://www.w3.org/ns/xproc" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="step-exec" class="ed" role="step" version="5.0-extension w3c-xproc">
<info>
<title>XProc 3.0: Operating System Steps</title>
<!-- defaults to date formatted <pubdate>2014-12-18</pubdate> -->
<copyright><year>2018</year><holder>@@FIXME:</holder></copyright>

<bibliorelation type="isformatof" xlink:href="specification.xml">XML</bibliorelation>
<authorgroup>
  <author>
    <personname>Norman Walsh</personname>
  </author>
  <author>
    <personname>Achim Berndzen</personname>
  </author>
  <author>
    <personname>Gerrit Imsieke</personname>
  </author>
  <author>
    <personname>Erik Siegel</personname>
  </author>
</authorgroup>

<abstract>
<para>This specification describes operating-system related steps
for
<citetitle>XProc 3.0: An XML Pipeline Language</citetitle>.</para>
</abstract>

<legalnotice role="status">

<para><emphasis>This section describes the status of this document at
the time of its publication. Other documents may supersede this
document.</emphasis></para>

<para>This document is derived from
<link xlink:href="https://www.w3.org/TR/2010/REC-xproc-20100511/">XProc:
An XML Pipeline Language</link> published by the W3C.</para>
</legalnotice>
</info>

<section xml:id="introduction">
<title>Introduction</title>

<para>This specification describes the <code>p:os-cwd</code>, <code>p:os-env</code>,
and <code>p:os-info</code> XProc steps.
A machine-readable description of these steps may be found in <link xlink:href="steps.xpl">steps.xpl</link>.
</para>

<para>Familarity with the
general nature of <biblioref linkend="xproc30"/>
steps is assumed; for background details, see
<biblioref linkend="xproc30-steps"/>.</para>
</section>

<section xml:id="c.os-cwd">
<title>p:os-cwd</title>

<para>The <code>p:os-cwd</code> step returns the current working directory.</para>

<p:declare-step type="p:os-cwd">
  <p:output port="result" content-types="application/xml"/>
</p:declare-step>

<para>The step returns a single <tag>c:result</tag> element containing
the current working directory. On systems which have no concept of a
working directory the resulting <tag>c:result</tag> element will be
empty.</para>

<simplesect>
<title>Document properties</title>
<para feature="os-cwd-preserves-none">No document properties are preserved.</para>
</simplesect>

</section>
<section xml:id="c.os-env">
<title>p:os-env</title>

<para>The <code>p:os-env</code> step returns information about the
operating system environment on which the processor is running.</para>

<p:declare-step type="p:os-env">
  <p:output port="result" content-types="application/xml"/>
</p:declare-step>

<para>The <tag>p:os-env</tag> step returns information about the
operating system environment. It returns a <tag>c:result</tag> element
containing zero or more <tag>c:env</tag> elements. Each
<tag>c:env</tag> element has a <tag class="attribute">name</tag> and a
<tag class="attribute">value</tag> attribute containing the name and
value of an environment variable.</para>

<para>On systems which have no concept of an environment, this step
returns an empty <tag>c:result</tag> element.</para>

<simplesect>
<title>Document properties</title>
<para feature="os-env-preserves-none">No document properties are preserved.</para>
</simplesect>

</section>
<section xml:id="c.os-info">
<title>p:os-info</title>

<para>The <code>p:os-info</code> step returns information about the
operating system on which the processor is running.</para>

<p:declare-step type="p:os-info">
  <p:output port="result" content-types="application/xml"/>
</p:declare-step>

<para>The step returns a <tag>c:result</tag> element with attributes
describing properties of the system. It <rfc2119>should</rfc2119>
include the following properties:</para>

<note role="editorial">
  <title>Editorial Note</title>
  <para>See <link xlink:href="https://github.com/xproc/3.0-steps/issues/29"/>.</para>
</note>

<variablelist>
  <varlistentry>
    <term><tag class="attribute">file-separator</tag></term>
    <listitem>
      <para>The file separator; usually “<code>/</code>” on Unix, “<code>\</code>” on Windows.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><tag class="attribute">path-separator</tag></term>
    <listitem>
      <para>The path separator; usually “<code>:</code>” on Unix, “<code>;</code>” on Windows.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><tag class="attribute">os-architecture</tag></term>
    <listitem>
      <para>The operating system architecture, for example “<code>i386</code>”.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><tag class="attribute">os-name</tag></term>
    <listitem>
      <para>The name of the operating system, for example “<code>Darwin</code>”.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><tag class="attribute">os-version</tag></term>
    <listitem>
      <para>The version of the operating system, for example “<code>10.5.6</code>”.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><tag class="attribute">cwd</tag></term>
    <listitem>
      <para>The current working directory. On systems which have no
      concept of a working directory the value of the attribute will
      be empty.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><tag class="attribute">user-name</tag></term>
    <listitem>
      <para>The login name of the effective user, for example “<code>jsmith</code>”.</para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term><tag class="attribute">user-home</tag></term>
    <listitem>
      <para>The home directory of the effective user, for example “<code>/home/jsmith</code>”.</para>
    </listitem>
  </varlistentry>
</variablelist>

<para><impl>The exact set of properties returned is
<glossterm>implementation-defined</glossterm>.</impl></para>

<simplesect>
  <title>Document properties</title>
  <para feature="os-info-preserves-none">No document properties are preserved.</para>
</simplesect>

</section>

<section xml:id="errors">
<title>Step Errors</title>

<para>This step can raise
<glossterm baseform="dynamic-error">dynamic errors</glossterm>.
</para>

<para><termdef xml:id="dt-dynamic-error">A <firstterm>dynamic
error</firstterm> is one which occurs while a pipeline is being
evaluated.</termdef> Examples of dynamic errors include references to
URIs that cannot be resolved, steps which fail, and pipelines that
exhaust the capacity of an implementation (such as memory or disk
space). For a more complete discussion of dynamic errors, see
<xspecref spec="xproc" xref="dynamic-errors"/>.
</para>

<para>If a step fails due to a dynamic error, failure propagates
upwards until either a <tag>p:try</tag> is encountered or the entire
pipeline fails. In other words, outside of a <tag>p:try</tag>, step
failure causes the entire pipeline to fail.</para>

<para>The following errors can be raised by this step:</para>

<?step-error-list level="none"?>

</section>

<appendix xml:id="conformance">
<title>Conformance</title>

<para>Conformant processors <rfc2119>must</rfc2119> implement all of the features
described in this specification except those that are explicitly identified
as optional.</para>

<para>Some aspects of processor behavior are not completely specified; those
features are either <glossterm role="unwrapped">implementation-dependent</glossterm> or
<glossterm role="unwrapped">implementation-defined</glossterm>.</para>

<para><termdef xml:id="dt-implementation-dependent">An
<firstterm>implementation-dependent</firstterm> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <glossterm role="unwrapped">implementation-dependent</glossterm> features are performed.</termdef>
</para>

<para><termdef xml:id="dt-implementation-defined">An
<firstterm>implementation-defined</firstterm> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <rfc2119>must</rfc2119> document
how <glossterm role="unwrapped">implementation-defined</glossterm> features are performed.</termdef>
</para>

<section xml:id="implementation-defined">
<title>Implementation-defined features</title>

<para>The following features are implementation-defined:</para>

<?implementation-defined-features?>
</section>

<section xml:id="implementation-dependent">
<title>Implementation-dependent features</title>

<para>The following features are implementation-dependent:</para>

<?implementation-dependent-features?>
</section>
</appendix>

<appendix xml:id="references">
<title>References</title>
<bibliolist>
<bibliomixed xml:id="xproc30"><abbrev>XProc 3.0</abbrev>
<citetitle xlink:href="http://spec.xproc.org/">XProc 3.0:
An XML Pipeline Language</citetitle>.
Norman Walsh, Achim Berndzen, Gerrit Imsieke and Erik Siegel, editors.
</bibliomixed>
<bibliomixed xml:id="xproc30-steps"><abbrev>XProc 3.0 Steps</abbrev>
<citetitle xlink:href="http://spec.xproc.org/">XProc 3.0 Steps:
An Introduction</citetitle>.
Norman Walsh, Achim Berndzen, Gerrit Imsieke and Erik Siegel, editors.
</bibliomixed>
</bibliolist>
</appendix>

<!-- This glossary will automatically be elided if there are no
     terms marked up as 'firstterm's in this specification. -->
<appendix xmlns:db="http://docbook.org/ns/docbook" xml:id="glossary"><title>Glossary</title><glosslist><glossentry><glossterm>dynamic
error</glossterm><glossdef><para>A <firstterm>dynamic
error</firstterm> is one which occurs while a pipeline is being
evaluated.</para></glossdef></glossentry><glossentry><glossterm>implementation-defined</glossterm><glossdef><para>An
<firstterm>implementation-defined</firstterm> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <rfc2119>must</rfc2119> document
how <glossterm role="unwrapped">implementation-defined</glossterm> features are performed.</para></glossdef></glossentry><glossentry><glossterm>implementation-dependent</glossterm><glossdef><para>An
<firstterm>implementation-dependent</firstterm> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <glossterm role="unwrapped">implementation-dependent</glossterm> features are performed.</para></glossdef></glossentry></glosslist></appendix>

</specification>